{"body":"node-fastpass\r\n=============\r\n\r\nA node.js library for getsatisfaction fastpass (single sign-on)\r\n\r\nThis serves as a drop-in replacement for the existing getsatisfaction fastpass libraries, and implements the same method signatures (with some defaulting for ease of use) as the ruby library.\r\nDocumentation for existing fastpass libraries can be found [on the getsatisfaction help site](http://getsatisfaction.com/corp/help/fastpass-implementation.html).\r\n\r\n---\r\n\r\n## Usage:\r\n\r\nAdd the dependency:\r\n\r\n    npm install --save fastpass\r\n\r\nRequire it:\r\n\r\n    var FastPass = require('fastpass')\r\n\r\nInstantiate it:\r\n\r\n    var fastPass = new FastPass({\r\n       // optional, defaults to \"getsatisfaction.com\"\r\n       domain : \"getsatisfaction.com\",\r\n       // required, your consumer key\r\n       consumer_key : \"xi2vaxgpp06m\",\r\n       // required, your consumer secret\r\n       consumer_secret : \"ly68der0hk8idfr5c73ozyq56jpwstd1\",\r\n       // optional at instantiation - email of the user\r\n       email : \"scott@getsatisfaction.com\",\r\n       // optional at instantiation - Name of the user\r\n       name : \"Scott\",\r\n       // optional at instantiation - unique ID of user (must stay the same for the lifetime the user in your system)\r\n       unique_identifier : \"nullstyle\",\r\n       // optional boolean, defaults to false\r\n       is_secure : false,\r\n       // optional object, any private fields you like. defaults to {}.\r\n       private_fields : {}\r\n    })\r\n\r\n### Implementation:\r\n\r\n#### Using the Script tag\r\n\r\n    fastPass.script({\r\n      email : \"scott@getsatisfaction.com\",\r\n      name : \"Scott\",\r\n      unique_identifier : \"nullstyle\"\r\n    }, function(err,script){\r\n      var outputScript = script\r\n    })\r\n\r\nor if you passed `name`, `unique_identifier`, and `email` at instantiation:\r\n\r\n    fastPass.script(function(err,script){\r\n      var outputScript = script\r\n    })\r\n\r\nNow replace all links to getSatisfaction with calls to `GSFN.goto_gsfn()`\r\n\r\n    // for instance, in jQuery\r\n    $('body').on('click','a[href=\"http://getsatisfaction.com\"]',function(){ GSFN.goto_gsfn(); return false; })\r\n\r\n#### Using Cookies along with CNAME\r\n\r\nSet a cookie named \"fastpass\" to the URL generated by the FastPass library. Note: This is only available if your company is using the CNAME feature.\r\n\r\n    // inside of an express route or whatever:\r\n    fastPass.url(<options>,function(err,url){\r\n      cookies[\"fastpass\"] = url\r\n    })\r\n\r\n#### Using the Query String\r\n\r\nInclude the generated URL in the param named \"fastpass\" in all links to Get Satisfaction.\r\n\r\n    // in some template context\r\n    fastPass.url(<options>,function(err,url){\r\n      var linkUrl = \"<a href=\"http://getsatisfaction.com/mycompany?fastpass=\" + url + \">Our Support Community</a>\"\r\n    })\r\n\r\n#### Option Details:\r\n\r\n    Field         |  Required  |  Notes\r\n    Key           |    Yes     |\r\n    Secret        |    Yes     |\r\n    Email         |    Yes     |\r\n    Name          |    Yes     |\r\n    Unique Id     |    Yes     | Must remain unchanged for the lifetime of the user's account in your system.\r\n    Is Secure     |    No      | (defaults to false)\r\n    Private Fields|    No      | Key/value pairs to send along with the user to Get Satisfaction.\r\n---\r\n\r\n### Example Setup:\r\n\r\nThe getSatisfaction setup is bi-directional, the smoothest sign on process happens when you have a CNAME set, a cookie with the current user, and a GSFN script on the page after login.\r\n\r\nIn an express server, here's how that might look:\r\n\r\n    // Assumes that you've require'd and instantiated FastPass with your credentials.\r\n    // a-la: var fastPass = new FastPass(<options>)\r\n    \r\n    // getsatisfaction middleware\r\n    // assumes that you've got authentication middleware before this that sets `req.authenticated` and adds `user` to `req.session`.\r\n    // these assumptions can obviously be replaced by however your app works, this should get you most of the way there.\r\n    app.use(function(req,res,next){\r\n      if(req.authenticated){\r\n        // add a cookie for getSatisfaction single sign on\r\n        // crudely strips the subdomain - probably should be smarter to avoid clobbering non-subdomain urls.\r\n        var cookieDomain = req.headers.host.replace('^[^\\.]*',''),\r\n            user = req.session.user\r\n        fastPass.url({name : user.first_name + \" \" + user.last_name, email : user.email, unique_identifier : user.id },function(err,url){\r\n          // this is the important part - sets a cookie for your domain.\r\n          res.cookie('fastpass',url, {domain : cookieDomain})\r\n          next()\r\n        })\r\n      } else {\r\n        next()\r\n      }\r\n    })\r\n\r\nYou'll also need to expose the script on all your logged-in pages:\r\n\r\n    app.get('/some/logged/in/route',function(req,res){\r\n      var user = req.session.user\r\n      fastPass.script({name : user.first_name + \" \" + user.last_name, email : user.email, unique_identifier : user.id },function(err,script){\r\n        // do your res.send() or whatever, render the script\r\n      })\r\n    })\r\n","google":"UA-32786711-1","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Node-fastpass","tagline":"A node.js library for getsatisfaction fastpass (single sign-on)"}